// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bfclust_addmin
List bfclust_addmin(NumericMatrix S, int mmin, IntegerVector nclust, int maxiter, double tolerance, double admm_penalty, int verbose);
RcppExport SEXP _methodcombo_bfclust_addmin(SEXP SSEXP, SEXP mminSEXP, SEXP nclustSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP admm_penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< int >::type mmin(mminSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type nclust(nclustSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type admm_penalty(admm_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(bfclust_addmin(S, mmin, nclust, maxiter, tolerance, admm_penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}
// compute_dist_nbs
arma::mat compute_dist_nbs(arma::mat A);
RcppExport SEXP _methodcombo_compute_dist_nbs(SEXP ASEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type A(ASEXP);
    rcpp_result_gen = Rcpp::wrap(compute_dist_nbs(A));
    return rcpp_result_gen;
END_RCPP
}
// sdp_caili
List sdp_caili(NumericMatrix S, NumericVector lambda, int maxiter, double tolerance, double admm_penalty, int verbose);
RcppExport SEXP _methodcombo_sdp_caili(SEXP SSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP admm_penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type admm_penalty(admm_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sdp_caili(S, lambda, maxiter, tolerance, admm_penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sdp_gv
List sdp_gv(NumericMatrix S, NumericVector lambda, int maxiter, double tolerance, double admm_penalty, int verbose);
RcppExport SEXP _methodcombo_sdp_gv(SEXP SSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP admm_penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type admm_penalty(admm_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sdp_gv(S, lambda, maxiter, tolerance, admm_penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}
// sdp_mm
List sdp_mm(NumericMatrix S, NumericVector lambda, int maxiter, double tolerance, double admm_penalty, int verbose);
RcppExport SEXP _methodcombo_sdp_mm(SEXP SSEXP, SEXP lambdaSEXP, SEXP maxiterSEXP, SEXP toleranceSEXP, SEXP admm_penaltySEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type S(SSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type tolerance(toleranceSEXP);
    Rcpp::traits::input_parameter< double >::type admm_penalty(admm_penaltySEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(sdp_mm(S, lambda, maxiter, tolerance, admm_penalty, verbose));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_methodcombo_bfclust_addmin", (DL_FUNC) &_methodcombo_bfclust_addmin, 7},
    {"_methodcombo_compute_dist_nbs", (DL_FUNC) &_methodcombo_compute_dist_nbs, 1},
    {"_methodcombo_sdp_caili", (DL_FUNC) &_methodcombo_sdp_caili, 6},
    {"_methodcombo_sdp_gv", (DL_FUNC) &_methodcombo_sdp_gv, 6},
    {"_methodcombo_sdp_mm", (DL_FUNC) &_methodcombo_sdp_mm, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_methodcombo(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
